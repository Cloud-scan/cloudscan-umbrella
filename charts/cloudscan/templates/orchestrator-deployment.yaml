{{- if .Values.orchestrator.enabled }}
{{- $_ := set . "serviceName" "orchestrator" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cloudscan.fullname" . }}-orchestrator
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "cloudscan.service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.orchestrator.replicaCount }}
  selector:
    matchLabels:
      {{- include "cloudscan.service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cloudscan.service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.orchestrator.serviceAccount.name | default "cloudscan-orchestrator" }}
      securityContext:
        {{- include "cloudscan.podSecurityContext" . | nindent 8 }}
      containers:
      - name: orchestrator
        image: {{ printf "%s/%s:%s" (.Values.orchestrator.image.registry | default .Values.global.imageRegistry | default "docker.io") .Values.orchestrator.image.repository (.Values.orchestrator.image.tag | default "latest") }}
        imagePullPolicy: {{ .Values.orchestrator.image.pullPolicy | default .Values.global.imagePullPolicy | default "IfNotPresent" }}
        securityContext:
          {{- include "cloudscan.containerSecurityContext" . | nindent 10 }}
        ports:
        - name: grpc
          containerPort: {{ .Values.orchestrator.service.grpcPort }}
          protocol: TCP
        - name: http
          containerPort: {{ .Values.orchestrator.service.httpPort }}
          protocol: TCP
        env:
          {{- include "cloudscan.postgresql.env" . | nindent 10 }}
          {{- include "cloudscan.redis.env" . | nindent 10 }}
          {{- include "cloudscan.common.env" . | nindent 10 }}
          {{- with .Values.orchestrator.env }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        resources:
          {{- toYaml .Values.orchestrator.resources | nindent 10 }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      {{- with .Values.orchestrator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.orchestrator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.orchestrator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}